/*
Paul has to write a code to check balanced brackets in an expression using stack. Help him write the code.
The expression contains such characters: '{', '}', '[',']', '(',')'.
An input expression is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.

Example –
i) {[]}) – Invalid
ii) {()}[] – Valid

Input Format
input will be in the form of brackets.

Constraints
your code must be memory effecient.

Output Format
Print "Balanced" if the expression is valid. Print "Not balanced" if the expression is not valid.

Sample Input 0
{(())}
Sample Output 0
Balanced

Sample Input 1
{(})
Sample Output 1
Not balanced
*/

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Stack<Character> stack=new Stack<>();
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        boolean found=true;
        for(int i=0;i<s.length();i++) {
            if (s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '[')
                stack.push(s.charAt(i));
            if (stack.isEmpty()) {
                found = false;
                break;
            }
            else {
                if ((s.charAt(i) == ')' && stack.peek() == '(') || (s.charAt(i) == '}' && stack.peek() == '{') ||
                        (s.charAt(i) == ']' && stack.peek() == '['))
                    stack.pop();
                else if ((s.charAt(i) == ')' && stack.peek() != '(') || (s.charAt(i) == '}' && stack.peek() != '{') ||
                        (s.charAt(i) == ']' && stack.peek() != '['))
                    stack.push(s.charAt(i));
            }
        }
        if(stack.isEmpty() && found)
            System.out.println("Balanced");
        else
            System.out.println("Not balanced");
    }
}
